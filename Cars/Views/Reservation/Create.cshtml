@model Cars.Models.Reservation

@{
    ViewData["Title"] = "Create Reservation";
}
@{
    var carId = ViewBag.CarId;
    var carName = ViewBag.CarName;
}

<h2>Create Reservation</h2>
<h2>@carName</h2>

@using (Html.BeginForm("Create", "Reservation", FormMethod.Post, new { id = "reservationForm"}))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.CarId)
    <div class="form-group">
        <label asp-for="PickupDate">Pickup Date</label>
        <input asp-for="PickupDate" type="datetime-local" class="form-control" id="pickupDate" />
        <span asp-validation-for="PickupDate" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="ReturnDate">Return Date</label>
        <input asp-for="ReturnDate" type="datetime-local" class="form-control" id="returnDate" />
        <span asp-validation-for="ReturnDate" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary">Create Reservation</button>
    @if (!ViewData.ModelState.IsValid)
    {
        // Check if general errors exist
        if (ViewData.ModelState[""] != null && ViewData.ModelState[""].Errors.Count > 0)
        {
            <div class="alert alert-danger">
                @Html.ValidationSummary(true, "Please correct the errors and try again.")
            </div>
        }
    }
    <div id="formError" class="alert alert-danger" style="display: none;">
    </div>
}
<div>
    <a asp-action="Reserve" asp-route-carId="@ViewBag.CarId" asp-route-carName="@ViewBag.CarName">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        function adjustDateTime(input) {
            // Ensure the input value is in the correct format
            var value = input.value;
            if (!value) {
                return; // Do nothing if the value is empty
            }

            // Parse the date and time from the input value
            var parts = value.split("T");
            var datePart = parts[0];
            var timePart = parts[1];

            if (datePart && timePart) {
                var timeComponents = timePart.split(":");
                var hours = parseInt(timeComponents[0]);
                var minutes = parseInt(timeComponents[1]);

                // Round the minutes to the nearest quarter-hour
                minutes = Math.round(minutes / 15) * 15;
                if (minutes === 60) {
                    // Handle case where rounding leads to 60 minutes
                    minutes = 0;
                    hours = (hours + 1) % 24;
                }

                // Reconstruct the time string
                var adjustedTime = ('0' + hours).slice(-2) + ':' + ('0' + minutes).slice(-2);

                // Update the input value
                input.value = datePart + "T" + adjustedTime;
            }
        }

        adjustDateTime(document.getElementById('pickupDate'))
        adjustDateTime(document.getElementById('returnDate'))

        document.getElementById('pickupDate').addEventListener('change', function () {
            adjustDateTime(this);
        });


        document.getElementById('returnDate').addEventListener('change', function () {
            adjustDateTime(this);
        });

        function handleFormSubmit(event) {
            event.preventDefault(); // Prevent the form from submitting immediately

            var pickupDate = new Date(document.getElementById('pickupDate').value);
            var returnDate = new Date(document.getElementById('returnDate').value);
            var now = new Date();
            var weekLater = new Date();
            weekLater.setDate(now.getDate() + 7);
            weekLater.setHours(23, 59, 59, 999);

            // Hide previous error messages
            var formErrorDiv = $('#formError');
            formErrorDiv.hide().text('');

            // Check if return date is later than pickup date
            if (returnDate <= pickupDate) {
                formErrorDiv.text("Return date must be later than pickup date.").show();
                return;
            }

            // Check if both dates are later than the current time
            if (pickupDate < now || returnDate < now) {
                formErrorDiv.text("Reservation dates must be in the future.").show();
                return;
            }

            // Check if both dates are within a week from now
            if (returnDate > weekLater || pickupDate > weekLater) {
                formErrorDiv.text("Return date must be no further than a week from today.").show();
                return;
            }

            var carId = @ViewBag.CarId;
            var pickupDateISO = pickupDate.toISOString();
            var returnDateISO = returnDate.toISOString();

            // Use jQuery to perform an AJAX GET request
            $.get('@Url.Action("CheckForOverlap", "Reservation")', { carId: carId, pickupDate: pickupDateISO, returnDate: returnDateISO })
                .done(function (isOverlapping) {
                    if (isOverlapping) {
                        formErrorDiv.text('There is already a reservation for the selected car in this time period.').show();
                    } else {
                        // If no overlap, submit the form
                        document.getElementById('reservationForm').removeEventListener('submit', handleFormSubmit);
                        document.getElementById('reservationForm').submit();
                    }
                })
                .fail(function () {
                    formErrorDiv.text('Error checking for reservation overlap. Please try again.').show();
                });
        }

        // Attach the event listener to the form's submit event
        document.getElementById('reservationForm').addEventListener('submit', handleFormSubmit);

    </script>
}
